import { Cloneable } from "../utils/Cloneable.js";
import { ToRawObj } from "./interfaces/ToRawObj.js";
import { SubCborRef } from "../SubCborRef.js";
type SimpleValue = boolean | undefined | null | number;
export declare function isSimpleCborValue(v: SimpleValue): v is SimpleValue;
type SimpleNumAs = "float" | "simple";
export type RawCborSimple = {
    simple: SimpleValue;
};
export declare function isRawCborSimple(s: RawCborSimple): boolean;
export declare class CborSimple implements ToRawObj, Cloneable<CborSimple> {
    subCborRef?: SubCborRef | undefined;
    readonly simple: SimpleValue;
    readonly numAs: SimpleNumAs;
    constructor(simple: SimpleValue, interpretNumAs?: SimpleNumAs, subCborRef?: SubCborRef | undefined);
    toRawObj(): RawCborSimple;
    clone(): CborSimple;
    static get null(): CborSimple;
    static get true(): CborSimple;
    static get false(): CborSimple;
    static get undefined(): CborSimple;
    static simpleNumber(n: number): CborSimple;
    static float(n: number): CborSimple;
}
export {};

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CborMap = exports.isRawCborMap = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var _1 = require("./index.js");
var headerFollowingToAddInfos_1 = require("../utils/headerFollowingToAddInfos.js");
var assert_1 = require("../utils/assert.js");
var defaultOpts = Object.freeze({
    indefinite: false,
    addInfos: undefined
});
function isRawCborMap(m) {
    if (typeof m !== "object" || m === null)
        return false;
    var keys = Object.keys(m);
    return (keys.includes("map") &&
        Array.isArray(m.map) &&
        m.map.every(function (entry) {
            if (typeof entry !== "object" || entry === null)
                return false;
            var entryKeys = Object.keys(entry);
            return (entryKeys.includes("k") &&
                (0, _1.isRawCborObj)(entry.k) &&
                entryKeys.includes("v") &&
                (0, _1.isRawCborObj)(entry.v));
        }));
}
exports.isRawCborMap = isRawCborMap;
var CborMap = /** @class */ (function () {
    function CborMap(map, options, subCborRef) {
        var _a;
        this.subCborRef = subCborRef;
        (0, assert_1.assert)(Array.isArray(map) &&
            map.every(function (entry) { return ((0, obj_utils_1.isObject)(entry) &&
                (0, _1.isCborObj)(entry.k) &&
                (0, _1.isCborObj)(entry.v)); }), "in 'CborMap' constructor: invalid input; got: " + map);
        var indefinite = (options === null || options === void 0 ? void 0 : options.indefinite) === true ? true : defaultOpts.indefinite;
        this.addInfos = (_a = options === null || options === void 0 ? void 0 : options.addInfos) !== null && _a !== void 0 ? _a : (0, headerFollowingToAddInfos_1.headerFollowingToAddInfos)(map.length);
        this.map = map;
        this.indefinite = indefinite === true;
    }
    CborMap.prototype.toRawObj = function () {
        return {
            map: this.map.map(function (entry) {
                return {
                    k: entry.k.toRawObj(),
                    v: entry.v.toRawObj()
                };
            }),
            options: {
                indefinite: this.indefinite
            }
        };
    };
    CborMap.prototype.clone = function () {
        var _a;
        return new CborMap(this.map.map(function (entry) { return ({
            k: entry.k.clone(),
            v: entry.v.clone()
        }); }), { indefinite: this.indefinite, addInfos: this.addInfos }, (_a = this.subCborRef) === null || _a === void 0 ? void 0 : _a.clone());
    };
    return CborMap;
}());
exports.CborMap = CborMap;

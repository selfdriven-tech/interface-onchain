import { ToRawObj } from "./interfaces/ToRawObj.js";
import { Cloneable } from "../utils/Cloneable.js";
import { ICborObj } from "./interfaces/ICborObj.js";
import { SubCborRef } from "../SubCborRef.js";
export type RawCborBytes = {
    bytes: Uint8Array;
};
export declare function isRawCborBytes(b: RawCborBytes): boolean;
export declare class CborBytes implements ToRawObj, Cloneable<CborBytes>, ICborObj {
    subCborRef?: SubCborRef | undefined;
    /** @deprecated use `bytes` instead */
    get buffer(): Uint8Array;
    /**
     * concatenates all the chunks
     * returns
     **/
    get bytes(): Uint8Array;
    /**
     * if the bytes where of definite length this just wraps the `bytes`
     * property in a single element array
     *
     * if the bytes where of indefinite length this array has more than one element
    **/
    chunks: Uint8Array | CborBytes[];
    get isDefiniteLength(): boolean;
    addInfos: number;
    constructor(bytes: Uint8Array | CborBytes[], addInfos?: number, subCborRef?: SubCborRef | undefined);
    toRawObj(): RawCborBytes;
    clone(): CborBytes;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CborText = exports.isRawCborText = void 0;
var headerFollowingToAddInfos_1 = require("../utils/headerFollowingToAddInfos.js");
function isRawCborText(t) {
    if (typeof t !== "object" || t === null)
        return false;
    var keys = Object.keys(t);
    return (keys.includes("text") &&
        typeof t.text === "string");
}
exports.isRawCborText = isRawCborText;
var CborText = /** @class */ (function () {
    function CborText(text, addInfos, subCborRef) {
        this.subCborRef = subCborRef;
        this.chunks = text;
        this.addInfos = addInfos !== null && addInfos !== void 0 ? addInfos : (0, headerFollowingToAddInfos_1.headerFollowingToAddInfos)(text.length);
    }
    Object.defineProperty(CborText.prototype, "text", {
        get: function () {
            if (typeof this.chunks === "string")
                return this.chunks;
            return this.chunks.reduce(function (accum, chunk) { return accum + chunk.text; }, "");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CborText.prototype, "isDefiniteLength", {
        get: function () {
            return typeof this.chunks === "string";
        },
        enumerable: false,
        configurable: true
    });
    CborText.prototype.toRawObj = function () {
        return {
            text: this.text
        };
    };
    CborText.prototype.clone = function () {
        var _a;
        return new CborText(typeof this.chunks === "string" ? this.chunks : this.chunks.map(function (chunk) { return chunk.clone(); }), this.addInfos, (_a = this.subCborRef) === null || _a === void 0 ? void 0 : _a.clone());
    };
    return CborText;
}());
exports.CborText = CborText;

import { Cloneable } from "../utils/Cloneable.js";
import { ToRawObj } from "./interfaces/ToRawObj.js";
import { ICborObj } from "./interfaces/ICborObj.js";
import { CborBytes } from "./CborBytes.js";
import { SubCborRef } from "../SubCborRef.js";
export type RawCborNegInt = {
    neg: bigint;
};
export declare function isRawCborNegative(neg: RawCborNegInt): boolean;
export interface BigNumInfos {
}
export declare class CborNegInt implements ToRawObj, Cloneable<CborNegInt>, ICborObj {
    subCborRef?: SubCborRef | undefined;
    private _num;
    get num(): bigint;
    set num(neg: bigint | number);
    addInfos: number;
    bigNumEncoding: CborBytes | undefined;
    isBigNum(): boolean;
    constructor(neg: number | bigint, addInfos?: number, bigNumEncoding?: CborBytes, subCborRef?: SubCborRef | undefined);
    static bigNum(encoding: CborBytes | bigint | number, subCborRef?: SubCborRef): CborNegInt;
    toRawObj(): RawCborNegInt;
    clone(): CborNegInt;
}

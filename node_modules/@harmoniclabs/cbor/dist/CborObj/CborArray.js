"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CborArray = exports.isRawCborArray = void 0;
var CborObj_1 = require("./CborObj.js");
var assert_1 = require("../utils/assert.js");
var headerFollowingToAddInfos_1 = require("../utils/headerFollowingToAddInfos.js");
function isRawCborArray(arr) {
    if (typeof arr !== "object")
        return false;
    var keys = Object.keys(arr);
    return (keys.includes("array") &&
        Array.isArray(arr.array) &&
        arr.array.every(CborObj_1.isRawCborObj));
}
exports.isRawCborArray = isRawCborArray;
var defaultOpts = Object.freeze({
    indefinite: false,
    addInfos: 0
});
var CborArray = /** @class */ (function () {
    function CborArray(array, options, subCborRef) {
        var _a;
        this.subCborRef = subCborRef;
        (0, assert_1.assert)(Array.isArray(array) &&
            array.every(CborObj_1.isCborObj), "in 'CborArray' constructor: invalid input; got: " + array);
        var indefinite = (options === null || options === void 0 ? void 0 : options.indefinite) === true ? true : defaultOpts.indefinite;
        this.addInfos = (_a = options === null || options === void 0 ? void 0 : options.addInfos) !== null && _a !== void 0 ? _a : (0, headerFollowingToAddInfos_1.headerFollowingToAddInfos)(array.length);
        this.array = array;
        this.indefinite = indefinite === true;
    }
    CborArray.prototype.toRawObj = function () {
        return {
            array: this.array.map(function (cborObj) { return cborObj.toRawObj(); }),
            options: this.indefinite === true ? {
                indefinite: this.indefinite
            } : undefined
        };
    };
    CborArray.prototype.clone = function () {
        var _a;
        return new CborArray(this.array.map(function (elem) { return elem.clone(); }), { indefinite: this.indefinite, addInfos: this.addInfos }, (_a = this.subCborRef) === null || _a === void 0 ? void 0 : _a.clone());
    };
    return CborArray;
}());
exports.CborArray = CborArray;

"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.overwriteSubCborRefBytes = void 0;
var CborObj_1 = require("../CborObj/index.js");
var SubCborRef_1 = require("../SubCborRef.js");
function overwriteSubCborRefBytes(cObj, bytes) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
    if (!(cObj.subCborRef instanceof SubCborRef_1.SubCborRef))
        return;
    if (cObj instanceof CborObj_1.CborText &&
        typeof cObj.chunks !== "string") {
        try {
            for (var _e = __values(cObj.chunks), _f = _e.next(); !_f.done; _f = _e.next()) {
                var chunk = _f.value;
                overwriteSubCborRefBytes(chunk, bytes);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    if (cObj instanceof CborObj_1.CborBytes &&
        !(cObj.chunks instanceof Uint8Array)) {
        try {
            for (var _g = __values(cObj.chunks), _h = _g.next(); !_h.done; _h = _g.next()) {
                var chunk = _h.value;
                overwriteSubCborRefBytes(chunk, bytes);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    if (cObj instanceof CborObj_1.CborTag) {
        overwriteSubCborRefBytes(cObj.data, bytes);
    }
    if ((cObj instanceof CborObj_1.CborUInt || cObj instanceof CborObj_1.CborNegInt) &&
        cObj.bigNumEncoding instanceof CborObj_1.CborBytes) {
        overwriteSubCborRefBytes(cObj.bigNumEncoding, bytes);
    }
    if (cObj instanceof CborObj_1.CborMap) {
        try {
            for (var _j = __values(cObj.map), _k = _j.next(); !_k.done; _k = _j.next()) {
                var _l = _k.value, k = _l.k, v = _l.v;
                overwriteSubCborRefBytes(k, bytes);
                overwriteSubCborRefBytes(v, bytes);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
            }
            finally { if (e_3) throw e_3.error; }
        }
    }
    if (cObj instanceof CborObj_1.CborArray) {
        try {
            for (var _m = __values(cObj.array), _o = _m.next(); !_o.done; _o = _m.next()) {
                var elem = _o.value;
                overwriteSubCborRefBytes(elem, bytes);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
            }
            finally { if (e_4) throw e_4.error; }
        }
    }
    cObj.subCborRef._bytes = bytes;
}
exports.overwriteSubCborRefBytes = overwriteSubCborRefBytes;

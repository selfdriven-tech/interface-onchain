"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubCborRef = void 0;
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
var CborString_1 = require("./CborString/index.js");
var SubCborRef = /** @class */ (function (_super) {
    __extends(SubCborRef, _super);
    function SubCborRef(_a) {
        var _bytes = _a._bytes, start = _a.start, end = _a.end;
        var _this = _super.call(this, _bytes) || this;
        // super might have cloned `_bytes`, but in `SubCborRef` we want to keep the reference
        _this._bytes = _bytes;
        _this.start = start;
        _this.end = end;
        return _this;
    }
    SubCborRef.prototype.toString = function () {
        return (0, uint8array_utils_1.toHex)(this.toBuffer());
    };
    SubCborRef.prototype.toBuffer = function () {
        return Uint8Array.prototype.slice.call(this._bytes, this.start, this.end);
    };
    SubCborRef.prototype.clone = function () {
        return new SubCborRef({
            _bytes: this._bytes,
            start: this.start,
            end: this.end
        });
    };
    return SubCborRef;
}(CborString_1.CborString));
exports.SubCborRef = SubCborRef;

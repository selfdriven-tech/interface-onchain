import { Bip32PrivateKey, Bip32PublicKey } from '../Bip32/index.js';
import { Ed25519PrivateKey, Ed25519PublicKey, Ed25519Signature } from '../Ed25519e/index.js';
import sodium from 'libsodium-wrappers-sumo';
const EXTENDED_KEY_HEX_LENGTH = 128;
export class SodiumBip32Ed25519 {
    constructor() {
    }
    static async create() {
        await sodium.ready;
        return Promise.resolve(new SodiumBip32Ed25519());
    }
    fromBip39Entropy(entropy, passphrase) {
        return Bip32PrivateKey.fromBip39Entropy(entropy, passphrase).hex();
    }
    getPublicKey(privateKey) {
        const key = privateKey.length === EXTENDED_KEY_HEX_LENGTH
            ? Ed25519PrivateKey.fromExtendedHex(privateKey)
            : Ed25519PrivateKey.fromNormalHex(privateKey);
        return key.toPublic().hex();
    }
    getPubKeyHash(publicKey) {
        const pubKey = Ed25519PublicKey.fromHex(publicKey);
        return pubKey.hash().hex();
    }
    getRawPrivateKey(bip32PrivateKey) {
        return Bip32PrivateKey.fromHex(bip32PrivateKey).toRawKey().hex();
    }
    getRawPublicKey(bip32PublicKey) {
        const pubKey = Bip32PublicKey.fromHex(bip32PublicKey);
        return pubKey.toRawKey().hex();
    }
    getBip32PublicKey(privateKey) {
        const privKey = Bip32PrivateKey.fromHex(privateKey);
        return privKey.toPublic().hex();
    }
    derivePrivateKey(parentKey, derivationIndices) {
        const privKey = Bip32PrivateKey.fromHex(parentKey);
        return privKey.derive(derivationIndices).hex();
    }
    derivePublicKey(parentKey, derivationIndices) {
        const pubKey = Bip32PublicKey.fromHex(parentKey);
        return pubKey.derive(derivationIndices).hex();
    }
    sign(privateKey, message) {
        const key = privateKey.length === EXTENDED_KEY_HEX_LENGTH
            ? Ed25519PrivateKey.fromExtendedHex(privateKey)
            : Ed25519PrivateKey.fromNormalHex(privateKey);
        return key.sign(message).hex();
    }
    verify(signature, message, publicKey) {
        const key = Ed25519PublicKey.fromHex(publicKey);
        return key.verify(Ed25519Signature.fromHex(signature), message);
    }
}
//# sourceMappingURL=SodiumBip32Ed25519.js.map
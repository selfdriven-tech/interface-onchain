/*
	blockfrost factory

	https://docs.blockfrost.io/
	https://github.com/blockfrost/blockfrost-js/blob/master/src/BlockFrostAPI.ts
	
*/

var entityos = require('entityos')
var _ = require('lodash')

module.exports =
{
	VERSION: '0.0.1',

	init: function (param)
	{
		entityos.add(
		{
			name: 'onchain-blockfrost-query',
			code: async function ()
			{
				let { BlockFrostAPI } = await import('@blockfrost/blockfrost-js')

				var event = entityos.get({scope: '_event'});
				var settings = entityos.get({scope: '_settings'});

				if (event.blockfrostProjectId == undefined)
				{
					event.blockfrostProjectId = settings.onchain.blockfrost.projectId
				}

				if (event.address == undefined)
				{
					event.address = _.first(event.addresses)
				}

				const API = new BlockFrostAPI(
				{
					projectId: event.blockfrostProjectId // see: https://blockfrost.io
				});

				//console.log(API)

				try
				{
					var queryOptions = {}

					if (event.query != undefined) {queryOptions = event.query};

					var queryResponse = {};

					if (queryOptions.address)
					{
						queryResponse.address = await API.addresses(event.address);
					}

					if (queryOptions.account)
					{
						if (event.stakeAddress == undefined)
						{
							event.stakeAddress = event.address;
						}

						queryResponse.account = await API.accounts(event.stakeAddress);
					}

					if (queryOptions.asset)
					{
						if (event.stakeAddress == undefined)
						{
							event.stakeAddress = event.address;
						}
						
						queryResponse.asset = await API.assetsById({address: event.address});
					}

					if (queryOptions.accountAsset)
					{
						if (event.stakeAddress == undefined)
						{
							event.stakeAddress = event.address;
						}
						
						queryResponse.account = await API.accountsAddressesAssetsAll(event.stakeAddress);
					}

					if (queryOptions.networkInfo)
					{
						queryResponse.networkInfo = await API.network();
					}

					if (queryOptions.latestBlock)
					{
						queryResponse.latestBlock = await API.blocksLatest();
					}

					if (queryOptions.latestEpoch)
					{
						queryResponse.latestEpoch = await API.epochsLatest();
					}

					if (queryOptions.health)
					{
						queryResponse.health = await API.health();
					}

					if (queryOptions.pools)
					{
						queryResponse.pools = await API.pools({ page: 1, count: 10, order: 'asc' });
					}

					if (queryOptions.metadata)
					{
						queryResponse.metadata = await API.metadataTxsLabel(event.metadata.label);

						if (event.metadata.txHash != undefined)
						{
							queryResponse.metadata = _.filter(queryResponse.metadata, function (md) {return md.tx_hash == event.metadata.txHash});
						}
					
						if (event.metadata.policyID != undefined)
						{
							var _metadata = [];
							
							_.each(queryResponse.metadata, function (md)
							{
								if (md['json_metadata'][event.metadata.policyID] != undefined)
								{
									_metadata.push(md['json_metadata'][event.metadata.policyID])
								}
							});

							queryResponse.metadata = _metadata;
						}
					}
					
					if (queryOptions.assets)
					{
						console.log(event.assets.policyID);

						queryResponse.assets = await API.assetsPolicyById(event.assets.policyID);
					}

					entityos.invoke(event.processComplete, queryResponse);
				}
				catch (error)
				{
					entityos._util.message(error);
				}
			}
		});		
	}
}
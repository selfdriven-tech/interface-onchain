/// <reference types="node" />
import { Buffer } from "buffer";
import BigNumber from "bignumber.js";
import { Token, CardanoAddress, AuxiliaryData, PlutusData, Output } from "../types";
export declare const getOutputValueSize: (adaAmount: BigNumber, tokens: Array<Token>) => number;
export declare const calculateMinUtxoAmount: (tokens: Array<Token>, lovelacePerUtxoWord: BigNumber, hasPlutusDataHash?: boolean) => BigNumber;
export declare const calculateMinUtxoAmountBabbage: (output: Output, utxoCostPerByte: BigNumber) => BigNumber;
export declare const getAddressFromHex: (hexAddress: Buffer) => CardanoAddress;
export declare const decodeBech32: (bech32Address: string) => {
    prefix: string;
    value: Buffer;
};
export declare const getAddressFromString: (address: string) => CardanoAddress;
export declare const getMaximumTokenSets: (oTokens: Array<Token>, maxValueSizePP: number) => Array<Array<Token>>;
export declare const createAuxiliaryDataCbor: (auxiliaryData: AuxiliaryData) => Buffer;
export declare const createPlutusDataCbor: (plutusData: PlutusData) => Buffer;
